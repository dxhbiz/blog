Appendix A Summary of guidelines
Dir 1.1 Required
EN: Any implementation-defined behaviour on which the output of the program depends shall be
Dir 2.1 Required
EN: All source files shall compile without any compilation errors
Dir 3.1 Required
EN: All code shall be traceable to documented requirements
Dir 4.1 Required
EN: Run-time failures shall be minimised
Dir 4.2 Advisory
EN: All usage of assembly language should be documented
Dir 4.3 Required
EN: Assembly language shall be encapsulated and isolated
Dir 4.4 Advisory
EN: Sections of code should not be 'commented out'
Dir 4.5 Advisory
EN: Identifiers in the same namespace with overlapping visibility should be typographically
Dir 4.6 Advisory
EN: typedefs that indicate size and signedness should be used in place of the basic numerical types
Dir 4.7 Required
EN: If a function returns error information, then that error information shall be tested
Dir 4.8 Advisory
EN: If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden
Dir 4.9 Advisory
EN: A function should be used in preference to a function-like macro where they are interchangeable
Dir 4.10 Required
EN: Precautions shall be taken in order to prevent the contents of a header file being included more than once
Dir 4.11 Required
EN: The validity of values passed to library functions shall be checked
Dir 4.12 Required
EN: Dynamic memory allocation shall not be used
Dir 4.13 Advisory
EN: Functions which are designed to provide operations on a resource should be called in an appropriate sequence
Dir 4.14 Required
EN: The validity of values received from external sources shall be checked
Rule 1.1 Required
EN: The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits
Rule 1.2 Advisory
EN: Language extensions should not be used
Rule 1.3 Required
EN: There shall be no occurrence of undefined or critical unspecified behaviour
Rule 2.1 Required
EN: A project shall not contain unreachable code
Rule 2.2 Required
EN: There shall be no dead code
Rule 2.3 Advisory
EN: A project should not contain unused type declarations
Rule 2.4 Advisory
EN: A project should not contain unused tag declarations
Rule 2.5 Advisory
EN: A project should not contain unused macro declarations
Rule 2.6 Advisory
EN: A function should not contain unused label declarations
Rule 2.7 Advisory
EN: There should be no unused parameters in functions
Rule 3.1 Required
EN: The character sequences /* and // shall not be used within a comment
Rule 3.2 Required
EN: Line-splicing shall not be used in // comments
Rule 4.1 Required
EN: Octal and hexadecimal escape sequences shall be terminated
Rule 4.2 Advisory
EN: Trigraphs should not be used
Rule 5.1 Required
EN: External identifiers shall be distinct
Rule 5.2 Required
EN: Identifiers declared in the same scope and name space shall be distinct
Rule 5.3 Required
EN: An identifier declared in an inner scope shall not hide an identifier declared in an outer scope
Rule 5.4 Required
EN: Macro identifiers shall be distinct
Rule 5.5 Required
EN: Identifiers shall be distinct from macro names
Rule 5.6 Required
EN: A typedef name shall be a unique identifier
Rule 5.7 Required
EN: A tag name shall be a unique identifier
Rule 5.8 Required
EN: Identifiers that define objects or functions with external linkage shall be unique
Rule 5.9 Advisory
EN: Identifiers that define objects or functions with internal linkage should be unique
Rule 6.1 Required
EN: Bit-fields shall only be declared with an appropriate type
Rule 6.2 Required
EN: Single-bit named bit fields shall not be of a signed type
Rule 7.1 Required
EN: Octal constants shall not be used
Rule 7.2 Required
EN: A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type
Rule 7.3 Required
EN: The lowercase character 'l' shall not be used in a literal suffix
Rule 7.4 Required
EN: A string literal shall not be assigned to an object unless the object's type is "pointer to const
Rule 8.1 Required
EN: Types shall be explicitly specified
Rule 8.2 Required
EN: Function types shall be in prototype form with named parameters
Rule 8.3 Required
EN: All declarations of an object or function shall use the same names and type qualifiers
Rule 8.4 Required
EN: A compatible declaration shall be visible when an object or function with external linkage is defined
Rule 8.5 Required
EN: An external object or function shall be declared once in one and only one file
Rule 8.6 Required
EN: An identifier with external linkage shall have exactly one external definition
Rule 8.7 Advisory
EN: Functions and objects should not be defined with external linkage if they are referenced in only one
Rule 8.8 Required
EN: The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage
Rule 8.9 Advisory
EN: An object should be defined at block scope if its identifier only appears in a single function
Rule 8.10 Required
EN: An inline function shall be declared with the static storage class
Rule 8.11 Advisory
EN: When an array with external linkage is declared, its size should be explicitly specified
Rule 8.12 Required
EN: Within an enumerator list, the value of an implicitlyspecified enumeration constant shall be unique
Rule 8.13 Advisory
EN: A pointer should point to a const-qualified type whenever possible
Rule 8.14 Required
EN: The restrict type qualifier shall not be used
Rule 9.1 Mandatory
EN: The value of an object with automatic storage duration shall not be read before it has been set
Rule 9.2 Required
EN: The initializer for an aggregate or union shall be enclosed in braces
Rule 9.3 Required
EN: Arrays shall not be partially initialized
Rule 9.4 Required
EN: An element of an object shall not be initialised more than once
Rule 9.5 Required
EN: Where designated initialisers are used to initialize an array object the size of the array shall be specified explicitly
Rule 10.1 Required
EN: Operands shall not be of an inappropriate essential type
Rule 10.2 Required
EN: Expressions of essentially character type shall not be used inappropriately in addition and subtraction
Rule 10.3 Required
EN: The varlue of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category
Rule 10.4 Required
EN: Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category
Rule 10.5 Advisory
EN: The value of an expression should not be cast to an inappropriate essential type
Rule 10.6 Required
EN: The value of a composite expression shall not be assigned to an object with wider essential type
Rule 10.7 Required
EN: If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type
Rule 10.8 Required
EN: The value of a composite expression shall not be cast to a different essential type category or a wider essential type
Rule 11.1 Required
EN: Conversions shall not be performed between a pointer to a function and any other type
Rule 11.2 Required
EN: Conversions shall not be performed between a pointer to incomplete and any other type
Rule 11.3 Required
EN: A cast shall not be performed between a pointer to object type and a pointer to a different object type
Rule 11.4 Advisory
EN: A conversion should not be performed between a pointer to object and an integer type
Rule 11.5 Advisory
EN: A conversion should not be performed from pointer to void into pointer to object
Rule 11.6 Required
EN: A cast shall not be performed between pointer to void and an arithmetic type
Rule 11.7 Required
EN: A cast shall not be performed between pointer to object and a non-integer arithmetic type
Rule 11.8 Required
EN: A cast shall not remove any const or volatile qualification from the type pointed to by a pointer
Rule 11.9 Required
EN: The macro NULL shall be the only permitted form of integer null pointer constant
Rule 12.1 Advisory
EN: The precedence of operators within expressions should be made explicit
Rule 12.2 Required
EN: The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits
Rule 12.3 Advisory
EN: The comma operator should not be used
Rule 12.4 Advisory
EN: Evaluation of constant expressions should not lead to unsigned integer wrap-around
Rule 12.5 Mandatory
EN: The sizeof operator shall not have an operand which is a function parameter declared as "array of type"
Rule 13.1 Required
EN: Initialiser lists shall not contain persistent side effects
Rule 13.2 Required
EN: The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders
Rule 13.3 Advisory
EN: A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator
Rule 13.4 Advisory
EN: The result of an assignment operator should not be used
Rule 13.5 Required
EN: The right hand operand of a logical && or || operator shall not contain persistent side effects
Rule 13.6 Mandatory
EN: The operand of the sizeof operator shall not contain any expression which has potential side effects
Rule 14.1 Required
EN: A loop counter shall not have essentially floating type
Rule 14.2 Required
EN: A for loop shall be well-formed
Rule 14.3 Required
EN: Controlling expressions shall not be invariant
Rule 14.4 Required
EN: The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type
Rule 15.1 Advisory
EN: The goto statement should not be used
Rule 15.2 Required
EN: The goto statement shall jump to a label declared later in the same function
Rule 15.3 Required
EN: Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement
Rule 15.4 Advisory
EN: There should be no more than one break or goto statement used to terminate any iteration statement
Rule 15.5 Advisory
EN: A function should have a single point of exit at the end
Rule 15.6 Advisory
EN: The body of an iteration-statement or a selectionstatement shall be a compound statement
Rule 15.7 Required
EN: All if . . else if constructs shall be terminated with an else statement
Rule 16.1 Required
EN: All switch statements shall be well-formed
Rule 16.2 Required
EN: A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement
Rule 16.3 Required
EN: An unconditional break statement shall terminate every switch-clause
Rule 16.4 Required
EN: Every switch statement shall have a default label
Rule 16.5 Required
EN: A default label shall appear as either the first or the last switch label of a switch statement
Rule 16.6 Required
EN: Every switch statement shall have at least two switch-clauses
Rule 16.7 Required
EN: A switch-expression shall not have essentially Boolean type
Rule 17.1 Required
EN: The features of <stdarg.h> shall not be used
Rule 17.2 Required
EN: Functions shall not call themselves, either directly or indirectly
Rule 17.3 Mandatory
EN: A function shall not be declared implicitly
Rule 17.4 Mandatory
EN: All exit paths from a function with non-void return type shall have an explicit return statement with an expression
Rule 17.5 Advisory
EN: The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements
Rule 17.6 Mandatory
EN: The declaration of an array parameter shall not contain the static keyword between the [ ]
Rule 17.7 Required
EN: The value returned by a function having non-void return type shall be used
Rule 17.8 Advisory
EN: A function parameter should not be modified
Rule 18.1 Required
EN: A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand
Rule 18.2 Required
EN: Subtraction between pointers shall only be applied to pointers that address elements of the same array
Rule 18.3 Required
EN: The relational operators >, >=, < and <= shall not be applied to objects of pointer type except where they point into the same object
Rule 18.4 Advisory
EN: The +, -, += and -= operators should not be applied to an expression of pointer type
Rule 18.5 Advisory
EN: Declarations should contain no more than two levels of pointer nesting
Rule 18.6 Required
EN: The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist
Rule 18.7 Required
EN: Flexible array members shall not be declared
Rule 18.8 Required
EN: Variable-length array types shall not be used
Rule 19.1 Mandatory
EN: An object shall not be assigned or copied to an overlapping object
Rule 19.2 Advisory
EN: The union keyword should not be used
Rule 20.1 Advisory
EN: #include directives should only be preceded by preprocessor directives or comments
Rule 20.2 Required
EN: The ', " or \ characters and the /* or // character sequences shall not occur in a header file name
Rule 20.3 Required
EN: The #include directive shall be followed by either a <filename> or "filename" sequence
Rule 20.4 Required
EN: A macro shall not be defined with the same name as a keyword
Rule 20.5 Advisory
EN: #undef should not be used
Rule 20.6 Required
EN: Tokens that look like a preprocessing directive shall not occur within a macro argument
Rule 20.7 Required
EN: Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses
Rule 20.8 Required
EN: The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1
Rule 20.9 Required
EN: All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation
Rule 20.10 Advisory
EN: The # and ## preprocessor operators should not be used
Rule 20.11 Required
EN: A macro parameter immediately following a # operator shall not immediately be followed by a ## operator
Rule 20.12 Required
EN: A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators
Rule 20.13 Required
EN: A line whose first token is # shall be a valid preprocessing directive
Rule 20.14 Required
EN: All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or
Rule 21.1 Required
EN: #define and #undef shall not be used on a reserved identifier or reserved macro name
Rule 21.2 Required
EN: A reserved identifier or reserved macro name shall not be declared
Rule 21.3 Required
EN: The memory allocation and deallocation functions of <stdlib.h> shall not be used
Rule 21.4 Required
EN: The standard header file <setjmp.h> shall not be used
Rule 21.5 Required
EN: The standard header file <signal.h> shall not be used
Rule 21.6 Required
EN: The Standard Library input/output routines shall not be used
Rule 21.7 Required
EN: The Standard Library functions atof, atoi, atol and atoll of <stdlib.h> shall not be used
Rule 21.8 Required
EN: The Standard Library functions abort, exit and system of <stdlib.h> shall not be used
Rule 21.9 Required
EN: The Standard Library functions bsearch and qsort of <stdlib.h> shall not be used
Rule 21.10 Required
EN: The Standard Library time and date routines shall not be used
Rule 21.11 Required
EN: The standard header file <tgmath.h> shall not be used
Rule 21.12 Advisory
EN: The exception handling features of <fenv.h> should not be used
Rule 21.13 Mandatory
EN: Any value passed to a function in <ctype.h> shall be representable as an unsigned char or be the value EOF
Rule 21.14 Required
EN: The Standard Library function memcmp shall not be used to compare null terminated strings
Rule 21.15 Required
EN: The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types
Rule 21.16 Required
EN: The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type
Rule 21.17 Mandatory
EN: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters
Rule 21.18 Mandatory
EN: The size_t argument passed to any function in <string.h> shall have an appropriate value
Rule 21.19 Mandatory
EN: The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to constqualified type
Rule 21.20 Mandatory
EN: The value returned by a call of one of the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function
Rule 22.1 Required
EN: All resources obtained dynamically by means of Standard Library functions shall be explicitly released
Rule 22.2 Mandatory
EN: A block of memory shall only be freed if it was allocated by means of a Standard Library function
Rule 22.3 Required
EN: The same file shall not be open for read and write access at the same time on different streams
Rule 22.4 Mandatory
EN: There shall be no attempt to write to a stream which has been opened as read-only
Rule 22.5 Mandatory
EN: A pointer to a FILE object shall not be dereferenced
Rule 22.6 Mandatory
EN: The value of a pointer to a FILE shall not be used after the associated stream has been closed
Rule 22.7 Required
EN: The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF
Rule 22.8 Required
EN: The value of errno shall be set to zero prior to a call to an errno-setting-function
Rule 22.9 Required
EN: The value of errno shall be tested against zero after calling an errno-setting-function
Rule 22.10 Required
EN: The value of errno shall only be tested when the last function to be called was an errno-settingfunction






























